#version 460
#extension GL_GOOGLE_include_directive : enable

#include "structure/global_geometry.glsl"
#include "structure/lbvh.glsl"

layout(set = 0, binding = 0) readonly buffer Vertex {
  VertexAttribute vertices[];
};
layout(set = 0, binding = 1) readonly buffer Index { uint indices[]; };
layout(set = 1, binding = 0) writeonly buffer MortonCodes {
  MortonCodeAttribute codes[];
};
layout(set = 1, binding = 1) writeonly buffer Elements { Element elements[]; };

layout(push_constant) uniform PushConstants {
  vec3 g_min; // AABB that contains the entire model
  vec3 g_max;
};

layout(local_size_x = 256) in;

// Expands a 10-bit integer into 30 bits
// by inserting 2 zeros after each bit.
uint expandBits(uint v) {
  v = (v * 0x00010001u) & 0xFF0000FFu;
  v = (v * 0x00000101u) & 0x0F00F00Fu;
  v = (v * 0x00000011u) & 0xC30C30C3u;
  v = (v * 0x00000005u) & 0x49249249u;
  return v;
}

// Calculates a 30-bit Morton code for the
// given 3D point located within the unit cube [0,1].
uint morton3D(float x, float y, float z) {
  x = min(max(x * 1024.0f, 0.0f), 1023.0f);
  y = min(max(y * 1024.0f, 0.0f), 1023.0f);
  z = min(max(z * 1024.0f, 0.0f), 1023.0f);
  uint xx = expandBits(uint(x));
  uint yy = expandBits(uint(y));
  uint zz = expandBits(uint(z));
  return xx * 4 + yy * 2 + zz;
}

// calculate morton code for each element
void main() {
  uint gID = gl_GlobalInvocationID.x;
  uint elementCount = indices.length() / 3;

  if (gID >= elementCount) {
    return;
  }

  const vec3 vert0 = vertices[indices[3 * gID + 0]].position;
  const vec3 vert1 = vertices[indices[3 * gID + 1]].position;
  const vec3 vert2 = vertices[indices[3 * gID + 2]].position;

  // calculate AABB of triangles and assign them
  vec3 aabbMin = min(vert0, min(vert1, vert2));
  vec3 aabbMax = max(vert0, max(vert1, vert2));
  elements[gID] = Element(aabbMin, aabbMax);

  // calculate center
  vec3 center = (aabbMin + 0.5 * (aabbMax - aabbMin)).xyz;
  // map to unit cube
  vec3 mappedCenter = (center - g_min) / (g_max - g_min);
  // assign morton code
  codes[gID] = MortonCodeAttribute(
      morton3D(mappedCenter.x, mappedCenter.y, mappedCenter.z), gID);
}